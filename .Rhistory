renv::restore()
installed.packages()
renv::install("tidyverse")
renv::install("shiny")
library(tidyverse)
library(shiny)
# Path to data file:
file = "data.csv"
#### Read data ####
df = read_delim(file, delim = ",")
df
summary(df)
theme_set(theme_classic())
library(tidyverse)
library(shiny)
theme_set(theme_classic())
df
df %>% summarise_all
df %>% summarise_all(class)
apply(df, 2, class)
df %>% summarise_all(.funs = list(
class,
length
))
?summarise_all
vars(df)
?across
df %>%
summarise(
across(
.cols = colnames(df),
.fns = list(
"Type" = class,
"Min" = min,
"Max" = max
)
)
)
df %>%
summarise(
across(
.cols = colnames(df),
.fns = list(
"Type" = class,
"Min" = min,
"Max" = max
)
)
) %>% View
iris %>%
group_by(Species) %>%
summarise(across(starts_with("Sepal"), list(mean = mean, sd = sd)))
summary
summary(df)
df
?select_if
`?select
?select
df
tst = summary(df)
tst
str(tst)
tst[,1]
tst[1]
tst[1,]
df %>%
select(where(is.character))
df %>%
head %>%
select(where(is.character))
df %>%
head(1) %>%
select(where(is.character))
system.time()
system.time({df %>%
head(1) %>%
select(where(is.character))})
system.time({df %>%
select(where(is.character))})
system.time({df %>%
select(where(is.character))})
system.time({df %>%
select(where(is.character))})
character_columns = df %>%
head(1) %>%
select(where(is.character))
character_columns
numeric_columns = df %>%
select(where(!is.character))
?where
numeric_columns = df %>%
select(where(~ !is.character(.x)))
numeric_columns
character_columns = df %>%
select(where(~ is.character(.x)))
numeric_columns = df %>%
select(where(~ !is.character(.x)))
numeric_columns
character_columns
character_columns %>% colnames
character_columns %>%
colnames %>%
sprintf(
"The following columns are categorical: %s",
.
) %>%
cat
character_columns %>%
colnames %>%
paste0 %>%
sprintf(
"The following columns are categorical: %s",
.
)
character_columns %>%
colnames %>%
paste0(collapse = ", ") %>%
sprintf(
"The following columns are categorical: %s",
.
)
character_columns %>%
colnames %>%
paste0(collapse = ", ") %>%
sprintf(
"The following columns are categorical: %s",
.
) %>%
cat
character_columns %>%
colnames %>%
paste0(collapse = ",\n") %>%
sprintf(
"The following columns are categorical:\n %s",
.
) %>%
cat
character_columns %>%
colnames %>%
paste0(collapse = ",\n") %>%
sprintf(
"The following columns are categorical:\n%s",
.
) %>%
cat
#### Variable overview ####
character_columns = df %>%
select(where(~ is.character(.x))) %>%
colnames
numeric_columns = df %>%
select(where(~ !is.character(.x))) %>%
colnames
numeric_columns
character_columns %>%
paste0(collapse = ",\n") %>%
sprintf(
"Categorical variables:\n%s",
.
)
character_columns %>%
paste0(collapse = ",\n") %>%
sprintf(
"Categorical variables:\n%s",
.
) %>%
cat
print_variables
#### Function definitions ####
print_variables = function(variables) {
variables %>%
paste0(collapse = ",\n") %>%
sprintf(
"Categorical variables:\n%s",
.
) %>%
cat
}
print_variables(character_columns)
df %>% select(all_of(character_columns)) %>% head
vector
count_unique_entries = function(vector) {
vector %>%
unique %>%
length
}
apply(df, 2, count_unique_entries)
library(Rcpp)
cppFunction(
"
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
bool FastUniqueC(NumericVector x) {
if (x.size() == 0) return false;
double first_value = x[0];
for (int i = 1; i < x.size(); ++i) {
if (x[i] != first_value) {
return false;
}
}
return true;
}
"
)
sourceCpp("src/R/cpp/cpp_functions.cpp")
apply(df, 2, FastUniqueC)
library(tidyverse)
library(shiny)
library(Rcpp)
theme_set(theme_classic())
#### Paths and global variables ####
file = "data.csv"
#### Function definitions ####
print_variables = function(variables) {
variables %>%
paste0(collapse = ",\n") %>%
sprintf(
"Categorical variables:\n%s",
.
) %>%
cat
}
sourceCpp("src/R/cpp/cpp_functions.cpp")
#### Read data ####
df = read_delim(file, delim = ",")
library(tidyverse)
library(shiny)
library(Rcpp)
theme_set(theme_classic())
#### Paths and global variables ####
file = "data.csv"
#### Function definitions ####
print_variables = function(variables) {
variables %>%
paste0(collapse = ",\n") %>%
sprintf(
"Categorical variables:\n%s",
.
) %>%
cat
}
sourceCpp("src/R/cpp/cpp_functions.cpp")
#### Read data ####
df = read_delim(file, delim = ",")
apply(df, 2, FastUnique)
apply(df, 2, FastUniqueC)
FastUniqueC(df$final_id)
FastUniqueC(df$number_of_page_to_trigger)
FastUniqueC(df$customer_country)
df %>% summarise_all(FastUniqueC)
SlowUniqueR = function(x) {length(unique(x)) == 1}
system.time({df %>% summarise_all(FastUniqueC)})
system.time({df %>% summarise_all(SlowUniqueR)})
constant_columns = df %>%
summarise_all(FastUniqueC)
constant_columns
df %>%
summarise_all(FastUniqueC)
df %>%
summarise_all(FastUniqueC)[1,]
df %>%
summarise_all(FastUniqueC) %>%
{.[1,]}
df %>%
summarise_all(FastUniqueC) %>%
{as.matrix(.)[1,]}
constant_columns = df %>%
summarise_all(FastUniqueC) %>%
as.matrix %>%
{
.[1,]
}
constant_columns
constant_columns = df %>%
summarise_all(FastUniqueC) %>%
as.matrix %>%
{
.[1,][.[1,]]
}
constant_columns
df %>%
summarise_all(FastUniqueC) %>% as.vector
df %>%
summarise_all(FastUniqueC) %>% as.list
df %>%
summarise_all(FastUniqueC) %>%
as.list %>%
lapply(., identity)
#### Function definitions ####
print_variables = function(message, variables) {
variables %>%
paste0(collapse = ",\n") %>%
sprintf(
"&s:\n%s",
message,
.
) %>%
cat
}
print_variables("Categorical variables", character_columns)
#### Variable overview ####
character_columns = df %>%
select(where(~ is.character(.x))) %>%
colnames
print_variables("Categorical variables", character_columns)
#### Function definitions ####
print_variables = function(message, variables) {
variables %>%
paste0(collapse = ",\n") %>%
sprintf(
"%s:\n%s",
message,
.
) %>%
cat
}
sourceCpp("src/R/cpp/cpp_functions.cpp")
#### Read data ####
df = read_delim(file, delim = ",")
#### Variable overview ####
character_columns = df %>%
select(where(~ is.character(.x))) %>%
colnames
print_variables("Categorical variables", character_columns)
numeric_columns = df %>%
select(where(~ !is.character(.x))) %>%
colnames
print_variables("Numeric variables", numeric_columns)
constant_columns = df %>%
summarise_all(FastUniqueC) %>%
as.matrix %>%
{
all_values = .[1,]
# Select only TRUE entried
all_values[all_values]
}
constant_columns
constant_columns = df %>%
summarise_all(FastUniqueC) %>%
as.matrix %>%
{
all_values = .[1,]
# Select only TRUE entried
all_values[all_values]
} %>%
names
constant_columns
print_variables("Constant columns", constant_columns)
install.packages("fread")
# Read the data
df = read_delim(file, delim = ",")
# Read the data
df = read_delim(file, delim = ",", show_col_types = FALSE)
dim(df)
dim(df) %>%
sprint(
"Dimension of the data: %s by %s",
.[1],
.[2]
)
dim(df) %>%
sprintf(
"Dimension of the data: %s by %s",
.[1],
.[2]
) %>%
cat
dim(df)
dim(df)[1]
dim(df)[2]
dim(df) %>%
sprintf(
"Dimension of the data: %s by %s",
.[1],
.[2]
)
dim(df) %>%
sprintf(
"Dimension of the data: %i by %i",
.[1],
.[2]
) %>%
cat
dim(df) %>%
sprintf(
"Dimension of the data: %i by %i",
.[1],
.[2]
)
dim(df) %>%
sprintf(
"Dimension of the data: %i by %i",
.[1],
.[2]
)
dim(df) %>%
sprintf(
"Dimension of the data: %s by %s",
.[1] %>% as.character,
.[2] %>% as.character
) %>%
cat
sprintf(
"Dimension of the data: %i by %i",
nrow(df),
ncol(df)
) %>%
cat
print_variables("The following varibles are constant", constant_columns)
df %>%
select(-all_of(constant_columns))
library(tidyverse)
library(shiny)
library(Rcpp)
theme_set(theme_classic())
#### Paths and global variables ####
file = "data.csv"
#### Function definitions ####
print_variables = function(message, variables) {
variables %>%
paste0(collapse = ",\n") %>%
sprintf(
"%s:\n%s",
message,
.
) %>%
cat
}
# Source cpp functions
sourceCpp("src/R/cpp/cpp_functions.cpp")
getwd()
# Source cpp functions
sourceCpp("src/R/cpp/cpp_functions.cpp")
getwd()
library(tidyverse)
library(shiny)
library(Rcpp)
theme_set(theme_classic())
#### Paths and global variables ####
file = "data.csv"
#### Function definitions ####
print_variables = function(message, variables) {
variables %>%
paste0(collapse = ",\n") %>%
sprintf(
"%s:\n%s",
message,
.
) %>%
cat
}
# Source cpp functions
sourceCpp("src/R/cpp/cpp_functions.cpp")
getwd()
Sys.getenv("QUARTO_PROJECT_DIR")
